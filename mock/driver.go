// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"
)

var (
	lockDriverMockContext sync.RWMutex
	lockDriverMockNext    sync.RWMutex
)

// DriverMock is a mock implementation of Driver.
//
//     func TestSomethingThatUsesDriver(t *testing.T) {
//
//         // make and configure a mocked Driver
//         mockedDriver := &DriverMock{
//             ContextFunc: func() context.Context {
// 	               panic("TODO: mock out the Context method")
//             },
//             NextFunc: func() bool {
// 	               panic("TODO: mock out the Next method")
//             },
//         }
//
//         // TODO: use mockedDriver in code that requires Driver
//         //       and then make assertions.
//
//     }
type DriverMock struct {
	// ContextFunc mocks the Context method.
	ContextFunc func() context.Context

	// NextFunc mocks the Next method.
	NextFunc func() bool

	// calls tracks calls to the methods.
	calls struct {
		// Context holds details about calls to the Context method.
		Context []struct {
		}
		// Next holds details about calls to the Next method.
		Next []struct {
		}
	}
}

// Context calls ContextFunc.
func (mock *DriverMock) Context() context.Context {
	if mock.ContextFunc == nil {
		panic("moq: DriverMock.ContextFunc is nil but Driver.Context was just called")
	}
	callInfo := struct {
	}{}
	lockDriverMockContext.Lock()
	mock.calls.Context = append(mock.calls.Context, callInfo)
	lockDriverMockContext.Unlock()
	return mock.ContextFunc()
}

// ContextCalls gets all the calls that were made to Context.
// Check the length with:
//     len(mockedDriver.ContextCalls())
func (mock *DriverMock) ContextCalls() []struct {
} {
	var calls []struct {
	}
	lockDriverMockContext.RLock()
	calls = mock.calls.Context
	lockDriverMockContext.RUnlock()
	return calls
}

// Next calls NextFunc.
func (mock *DriverMock) Next() bool {
	if mock.NextFunc == nil {
		panic("moq: DriverMock.NextFunc is nil but Driver.Next was just called")
	}
	callInfo := struct {
	}{}
	lockDriverMockNext.Lock()
	mock.calls.Next = append(mock.calls.Next, callInfo)
	lockDriverMockNext.Unlock()
	return mock.NextFunc()
}

// NextCalls gets all the calls that were made to Next.
// Check the length with:
//     len(mockedDriver.NextCalls())
func (mock *DriverMock) NextCalls() []struct {
} {
	var calls []struct {
	}
	lockDriverMockNext.RLock()
	calls = mock.calls.Next
	lockDriverMockNext.RUnlock()
	return calls
}
