// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package mock

import (
	"github.com/andviro/middleware"
	"sync"
)

var (
	lockBotMockOn  sync.RWMutex
	lockBotMockUse sync.RWMutex
)

// BotMock is a mock implementation of Bot.
//
//     func TestSomethingThatUsesBot(t *testing.T) {
//
//         // make and configure a mocked Bot
//         mockedBot := &BotMock{
//             OnFunc: func(in1 middleware.Predicate, in2 middleware.Handler)  {
// 	               panic("TODO: mock out the On method")
//             },
//             UseFunc: func(in1 ...middleware.Middleware)  {
// 	               panic("TODO: mock out the Use method")
//             },
//         }
//
//         // TODO: use mockedBot in code that requires Bot
//         //       and then make assertions.
//
//     }
type BotMock struct {
	// OnFunc mocks the On method.
	OnFunc func(in1 middleware.Predicate, in2 middleware.Handler)

	// UseFunc mocks the Use method.
	UseFunc func(in1 ...middleware.Middleware)

	// calls tracks calls to the methods.
	calls struct {
		// On holds details about calls to the On method.
		On []struct {
			// In1 is the in1 argument value.
			In1 middleware.Predicate
			// In2 is the in2 argument value.
			In2 middleware.Handler
		}
		// Use holds details about calls to the Use method.
		Use []struct {
			// In1 is the in1 argument value.
			In1 []middleware.Middleware
		}
	}
}

// On calls OnFunc.
func (mock *BotMock) On(in1 middleware.Predicate, in2 middleware.Handler) {
	if mock.OnFunc == nil {
		panic("moq: BotMock.OnFunc is nil but Bot.On was just called")
	}
	callInfo := struct {
		In1 middleware.Predicate
		In2 middleware.Handler
	}{
		In1: in1,
		In2: in2,
	}
	lockBotMockOn.Lock()
	mock.calls.On = append(mock.calls.On, callInfo)
	lockBotMockOn.Unlock()
	mock.OnFunc(in1, in2)
}

// OnCalls gets all the calls that were made to On.
// Check the length with:
//     len(mockedBot.OnCalls())
func (mock *BotMock) OnCalls() []struct {
	In1 middleware.Predicate
	In2 middleware.Handler
} {
	var calls []struct {
		In1 middleware.Predicate
		In2 middleware.Handler
	}
	lockBotMockOn.RLock()
	calls = mock.calls.On
	lockBotMockOn.RUnlock()
	return calls
}

// Use calls UseFunc.
func (mock *BotMock) Use(in1 ...middleware.Middleware) {
	if mock.UseFunc == nil {
		panic("moq: BotMock.UseFunc is nil but Bot.Use was just called")
	}
	callInfo := struct {
		In1 []middleware.Middleware
	}{
		In1: in1,
	}
	lockBotMockUse.Lock()
	mock.calls.Use = append(mock.calls.Use, callInfo)
	lockBotMockUse.Unlock()
	mock.UseFunc(in1...)
}

// UseCalls gets all the calls that were made to Use.
// Check the length with:
//     len(mockedBot.UseCalls())
func (mock *BotMock) UseCalls() []struct {
	In1 []middleware.Middleware
} {
	var calls []struct {
		In1 []middleware.Middleware
	}
	lockBotMockUse.RLock()
	calls = mock.calls.Use
	lockBotMockUse.RUnlock()
	return calls
}
